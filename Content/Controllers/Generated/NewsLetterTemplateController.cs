using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using SubSonic;
using SubSonic.Utilities;
// <auto-generated />
namespace Etech.CMS.Content
{
    /// <summary>
    /// Controller class for NewsLetter_Templates
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class NewsLetterTemplateController
    {
        // Preload our schema..
        NewsLetterTemplate thisSchemaLoad = new NewsLetterTemplate();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (System.Web.HttpContext.Current != null)
                    {
                        userName = System.Web.HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = System.Threading.Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public NewsLetterTemplateCollection FetchAll()
        {
            NewsLetterTemplateCollection coll = new NewsLetterTemplateCollection();
            Query qry = new Query(NewsLetterTemplate.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public NewsLetterTemplateCollection FetchByID(object TemplateID)
        {
            NewsLetterTemplateCollection coll = new NewsLetterTemplateCollection().Where("TemplateID", TemplateID).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public NewsLetterTemplateCollection FetchByQuery(Query qry)
        {
            NewsLetterTemplateCollection coll = new NewsLetterTemplateCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object TemplateID)
        {
            return (NewsLetterTemplate.Delete(TemplateID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object TemplateID)
        {
            return (NewsLetterTemplate.Destroy(TemplateID) == 1);
        }



        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public void Insert(string TemplateGuID, string TemplateName, string TemplateDescription, bool? IsActive, string CreatedBy, DateTime? CreatedOn, string ModifiedBy, DateTime? ModifiedOn)
        {
            NewsLetterTemplate item = new NewsLetterTemplate();

            item.TemplateGuID = TemplateGuID;

            item.TemplateName = TemplateName;

            item.TemplateDescription = TemplateDescription;

            item.IsActive = IsActive;

            item.CreatedBy = CreatedBy;

            item.CreatedOn = CreatedOn;

            item.ModifiedBy = ModifiedBy;

            item.ModifiedOn = ModifiedOn;


            item.Save(UserName);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void Update(int TemplateID, string TemplateGuID, string TemplateName, string TemplateDescription, bool? IsActive, string CreatedBy, DateTime? CreatedOn, string ModifiedBy, DateTime? ModifiedOn)
        {
            NewsLetterTemplate item = new NewsLetterTemplate();
            item.MarkOld();
            item.IsLoaded = true;

            item.TemplateID = TemplateID;

            item.TemplateGuID = TemplateGuID;

            item.TemplateName = TemplateName;

            item.TemplateDescription = TemplateDescription;

            item.IsActive = IsActive;

            item.CreatedBy = CreatedBy;

            item.CreatedOn = CreatedOn;

            item.ModifiedBy = ModifiedBy;

            item.ModifiedOn = ModifiedOn;

            item.Save(UserName);
        }
    }
}
