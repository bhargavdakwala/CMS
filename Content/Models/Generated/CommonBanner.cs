using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Etech.CMS.Content
{
	/// <summary>
	/// Strongly-typed collection for the CommonBanner class.
	/// </summary>
	[Serializable]
	public partial class CommonBannerCollection : ActiveList<CommonBanner, CommonBannerCollection>
	{	   
		public CommonBannerCollection() {}
		
		/// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
		/// </summary>
		/// <returns>CommonBannerCollection</returns>
		public CommonBannerCollection Filter()
		{
			for (int i = this.Count - 1; i > -1; i--)
			{
				CommonBanner o = this[i];
				foreach (SubSonic.Where w in this.wheres)
				{
					bool remove = false;
					System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
					if (pi.CanRead)
					{
						object val = pi.GetValue(o, null);
						switch (w.Comparison)
						{
							case SubSonic.Comparison.Equals:
								if (!val.Equals(w.ParameterValue))
								{
									remove = true;
								}
								break;
						}
					}
					if (remove)
					{
						this.Remove(o);
						break;
					}
				}
			}
			return this;
		}
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the CommonBanner table.
	/// </summary>
	[Serializable]
	public partial class CommonBanner : ActiveRecord<CommonBanner>
	{
		#region .ctors and Default Settings
		
		public CommonBanner()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public CommonBanner(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
		
		public CommonBanner(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public CommonBanner(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CMS_Content_CommonBanner", TableType.Table, DataService.GetInstance("CMSProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarImageID = new TableSchema.TableColumn(schema);
				colvarImageID.ColumnName = "ImageID";
				colvarImageID.DataType = DbType.Currency;
				colvarImageID.MaxLength = 0;
				colvarImageID.AutoIncrement = true;
				colvarImageID.IsNullable = false;
				colvarImageID.IsPrimaryKey = true;
				colvarImageID.IsForeignKey = false;
				colvarImageID.IsReadOnly = false;
				colvarImageID.DefaultSetting = @"";
				colvarImageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImageID);
				
				TableSchema.TableColumn colvarImagePath = new TableSchema.TableColumn(schema);
				colvarImagePath.ColumnName = "ImagePath";
				colvarImagePath.DataType = DbType.String;
				colvarImagePath.MaxLength = 500;
				colvarImagePath.AutoIncrement = false;
				colvarImagePath.IsNullable = true;
				colvarImagePath.IsPrimaryKey = false;
				colvarImagePath.IsForeignKey = false;
				colvarImagePath.IsReadOnly = false;
				colvarImagePath.DefaultSetting = @"";
				colvarImagePath.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImagePath);
				
				TableSchema.TableColumn colvarImageTitle = new TableSchema.TableColumn(schema);
				colvarImageTitle.ColumnName = "ImageTitle";
				colvarImageTitle.DataType = DbType.String;
				colvarImageTitle.MaxLength = 500;
				colvarImageTitle.AutoIncrement = false;
				colvarImageTitle.IsNullable = true;
				colvarImageTitle.IsPrimaryKey = false;
				colvarImageTitle.IsForeignKey = false;
				colvarImageTitle.IsReadOnly = false;
				colvarImageTitle.DefaultSetting = @"";
				colvarImageTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImageTitle);
				
				TableSchema.TableColumn colvarSortOrder = new TableSchema.TableColumn(schema);
				colvarSortOrder.ColumnName = "SortOrder";
				colvarSortOrder.DataType = DbType.Int32;
				colvarSortOrder.MaxLength = 0;
				colvarSortOrder.AutoIncrement = false;
				colvarSortOrder.IsNullable = true;
				colvarSortOrder.IsPrimaryKey = false;
				colvarSortOrder.IsForeignKey = false;
				colvarSortOrder.IsReadOnly = false;
				colvarSortOrder.DefaultSetting = @"";
				colvarSortOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSortOrder);
				
				TableSchema.TableColumn colvarModifyDate = new TableSchema.TableColumn(schema);
				colvarModifyDate.ColumnName = "ModifyDate";
				colvarModifyDate.DataType = DbType.DateTime;
				colvarModifyDate.MaxLength = 0;
				colvarModifyDate.AutoIncrement = false;
				colvarModifyDate.IsNullable = true;
				colvarModifyDate.IsPrimaryKey = false;
				colvarModifyDate.IsForeignKey = false;
				colvarModifyDate.IsReadOnly = false;
				colvarModifyDate.DefaultSetting = @"";
				colvarModifyDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifyDate);
				
				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["CMSProvider"].AddSchema("CommonBanner",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ImageID")]
		[Bindable(true)]
		public decimal ImageID 
		{
			get { return GetColumnValue<decimal>(Columns.ImageID); }
			set { SetColumnValue(Columns.ImageID, value); }
		}
		  
		[XmlAttribute("ImagePath")]
		[Bindable(true)]
		public string ImagePath 
		{
			get { return GetColumnValue<string>(Columns.ImagePath); }
			set { SetColumnValue(Columns.ImagePath, value); }
		}
		  
		[XmlAttribute("ImageTitle")]
		[Bindable(true)]
		public string ImageTitle 
		{
			get { return GetColumnValue<string>(Columns.ImageTitle); }
			set { SetColumnValue(Columns.ImageTitle, value); }
		}
		  
		[XmlAttribute("SortOrder")]
		[Bindable(true)]
		public int? SortOrder 
		{
			get { return GetColumnValue<int?>(Columns.SortOrder); }
			set { SetColumnValue(Columns.SortOrder, value); }
		}
		  
		[XmlAttribute("ModifyDate")]
		[Bindable(true)]
		public DateTime? ModifyDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifyDate); }
			set { SetColumnValue(Columns.ModifyDate, value); }
		}
		  
		[XmlAttribute("IsActive")]
		[Bindable(true)]
		public bool? IsActive 
		{
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
		
		
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal varImageID,string varImagePath,string varImageTitle,int? varSortOrder,DateTime? varModifyDate,bool? varIsActive)
		{
			CommonBanner item = new CommonBanner();
			
			item.ImageID = varImageID;
			
			item.ImagePath = varImagePath;
			
			item.ImageTitle = varImageTitle;
			
			item.SortOrder = varSortOrder;
			
			item.ModifyDate = varModifyDate;
			
			item.IsActive = varIsActive;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(decimal varImageID,string varImagePath,string varImageTitle,int? varSortOrder,DateTime? varModifyDate,bool? varIsActive)
		{
			CommonBanner item = new CommonBanner();
			
				item.ImageID = varImageID;
			
				item.ImagePath = varImagePath;
			
				item.ImageTitle = varImageTitle;
			
				item.SortOrder = varSortOrder;
			
				item.ModifyDate = varModifyDate;
			
				item.IsActive = varIsActive;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
		
		
		
		#region Typed Columns
		
		
		public static TableSchema.TableColumn ImageIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		
		
		
		public static TableSchema.TableColumn ImagePathColumn
		{
			get { return Schema.Columns[1]; }
		}
		
		
		
		public static TableSchema.TableColumn ImageTitleColumn
		{
			get { return Schema.Columns[2]; }
		}
		
		
		
		public static TableSchema.TableColumn SortOrderColumn
		{
			get { return Schema.Columns[3]; }
		}
		
		
		
		public static TableSchema.TableColumn ModifyDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		
		
		
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		
		
		
		#endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ImageID = @"ImageID";
			 public static string ImagePath = @"ImagePath";
			 public static string ImageTitle = @"ImageTitle";
			 public static string SortOrder = @"SortOrder";
			 public static string ModifyDate = @"ModifyDate";
			 public static string IsActive = @"IsActive";
						
		}
		#endregion
		
		#region Update PK Collections
		
		#endregion
	
		#region Deep Save
		
		#endregion
	}
}
