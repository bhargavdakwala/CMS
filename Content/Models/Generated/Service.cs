using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Etech.CMS.Content
{
	/// <summary>
	/// Strongly-typed collection for the Service class.
	/// </summary>
	[Serializable]
	public partial class ServiceCollection : ActiveList<Service, ServiceCollection>
	{	   
		public ServiceCollection() {}
		
		/// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
		/// </summary>
		/// <returns>ServiceCollection</returns>
		public ServiceCollection Filter()
		{
			for (int i = this.Count - 1; i > -1; i--)
			{
				Service o = this[i];
				foreach (SubSonic.Where w in this.wheres)
				{
					bool remove = false;
					System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
					if (pi.CanRead)
					{
						object val = pi.GetValue(o, null);
						switch (w.Comparison)
						{
							case SubSonic.Comparison.Equals:
								if (!val.Equals(w.ParameterValue))
								{
									remove = true;
								}
								break;
						}
					}
					if (remove)
					{
						this.Remove(o);
						break;
					}
				}
			}
			return this;
		}
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Service table.
	/// </summary>
	[Serializable]
	public partial class Service : ActiveRecord<Service>
	{
		#region .ctors and Default Settings
		
		public Service()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Service(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
		
		public Service(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Service(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CMS_Content_Service", TableType.Table, DataService.GetInstance("CMSProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarServiceID = new TableSchema.TableColumn(schema);
				colvarServiceID.ColumnName = "ServiceID";
				colvarServiceID.DataType = DbType.Int32;
				colvarServiceID.MaxLength = 0;
				colvarServiceID.AutoIncrement = true;
				colvarServiceID.IsNullable = false;
				colvarServiceID.IsPrimaryKey = true;
				colvarServiceID.IsForeignKey = false;
				colvarServiceID.IsReadOnly = false;
				colvarServiceID.DefaultSetting = @"";
				colvarServiceID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceID);
				
				TableSchema.TableColumn colvarServiceGuid = new TableSchema.TableColumn(schema);
				colvarServiceGuid.ColumnName = "ServiceGuid";
				colvarServiceGuid.DataType = DbType.Guid;
				colvarServiceGuid.MaxLength = 0;
				colvarServiceGuid.AutoIncrement = false;
				colvarServiceGuid.IsNullable = true;
				colvarServiceGuid.IsPrimaryKey = false;
				colvarServiceGuid.IsForeignKey = false;
				colvarServiceGuid.IsReadOnly = false;
				colvarServiceGuid.DefaultSetting = @"";
				colvarServiceGuid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceGuid);
				
				TableSchema.TableColumn colvarServiceTitle = new TableSchema.TableColumn(schema);
				colvarServiceTitle.ColumnName = "ServiceTitle";
				colvarServiceTitle.DataType = DbType.String;
				colvarServiceTitle.MaxLength = 255;
				colvarServiceTitle.AutoIncrement = false;
				colvarServiceTitle.IsNullable = true;
				colvarServiceTitle.IsPrimaryKey = false;
				colvarServiceTitle.IsForeignKey = false;
				colvarServiceTitle.IsReadOnly = false;
				colvarServiceTitle.DefaultSetting = @"";
				colvarServiceTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceTitle);


				TableSchema.TableColumn colvarServiceDescription = new TableSchema.TableColumn(schema);
				colvarServiceDescription.ColumnName = "ServiceDescription";
				colvarServiceDescription.DataType = DbType.String;
				colvarServiceDescription.MaxLength = 1073741823;
				colvarServiceDescription.AutoIncrement = false;
				colvarServiceDescription.IsNullable = true;
				colvarServiceDescription.IsPrimaryKey = false;
				colvarServiceDescription.IsForeignKey = false;
				colvarServiceDescription.IsReadOnly = false;
				colvarServiceDescription.DefaultSetting = @"";
				colvarServiceDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceDescription);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarSortOrder = new TableSchema.TableColumn(schema);
				colvarSortOrder.ColumnName = "SortOrder";
				colvarSortOrder.DataType = DbType.Int32;
				colvarSortOrder.MaxLength = 0;
				colvarSortOrder.AutoIncrement = false;
				colvarSortOrder.IsNullable = true;
				colvarSortOrder.IsPrimaryKey = false;
				colvarSortOrder.IsForeignKey = false;
				colvarSortOrder.IsReadOnly = false;
				colvarSortOrder.DefaultSetting = @"";
				colvarSortOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSortOrder);

				TableSchema.TableColumn colvarAffiliateNews = new TableSchema.TableColumn(schema);
				colvarAffiliateNews.ColumnName = "AffiliateNews";
				colvarAffiliateNews.DataType = DbType.String;
				colvarAffiliateNews.MaxLength = 1073741823;
				colvarAffiliateNews.AutoIncrement = false;
				colvarAffiliateNews.IsNullable = true;
				colvarAffiliateNews.IsPrimaryKey = false;
				colvarAffiliateNews.IsForeignKey = false;
				colvarAffiliateNews.IsReadOnly = false;
				colvarAffiliateNews.DefaultSetting = @"";
				colvarAffiliateNews.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAffiliateNews);
				
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["CMSProvider"].AddSchema("Service",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ServiceID")]
		[Bindable(true)]
		public int ServiceID 
		{
			get { return GetColumnValue<int>(Columns.ServiceID); }
			set { SetColumnValue(Columns.ServiceID, value); }
		}
		  
		[XmlAttribute("ServiceGuid")]
		[Bindable(true)]
		public Guid? ServiceGuid 
		{
			get { return GetColumnValue<Guid?>(Columns.ServiceGuid); }
			set { SetColumnValue(Columns.ServiceGuid, value); }
		}
		  
		[XmlAttribute("ServiceTitle")]
		[Bindable(true)]
		public string ServiceTitle 
		{
			get { return GetColumnValue<string>(Columns.ServiceTitle); }
			set { SetColumnValue(Columns.ServiceTitle, value); }
		}

		[XmlAttribute("ServiceDescription")]
		[Bindable(true)]
		public string ServiceDescription
		{
			get { return GetColumnValue<string>(Columns.ServiceDescription); }
			set { SetColumnValue(Columns.ServiceDescription, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}

		[XmlAttribute("SortOrder")]
		[Bindable(true)]
		public int? SortOrder
		{
			get { return GetColumnValue<int?>(Columns.SortOrder); }
			set { SetColumnValue(Columns.SortOrder, value); }
		}

		[XmlAttribute("AffiliateNews")]
		[Bindable(true)]
		public string AffiliateNews
		{
			get { return GetColumnValue<string>(Columns.AffiliateNews); }
			set { SetColumnValue(Columns.AffiliateNews, value); }
		}
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
		
		
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(Guid? varServiceGuid, string varServiceTitle, string varServiceDescription, string varCreatedBy, DateTime? varCreatedOn, string varModifiedBy, DateTime? varModifiedOn, int? varSortOrder, string varAffiliateNews)
		{
			Service item = new Service();
			
			item.ServiceGuid = varServiceGuid;
			
			item.ServiceTitle = varServiceTitle;

			item.ServiceDescription = varServiceDescription;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;

			item.SortOrder = varSortOrder;

			item.AffiliateNews = varAffiliateNews;
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varServiceID, Guid? varServiceGuid, string varServiceTitle, string varServiceDescription, string varCreatedBy, DateTime? varCreatedOn, string varModifiedBy, DateTime? varModifiedOn, int? varSortOrder, string varAffiliateNews)
		{
			Service item = new Service();
			
				item.ServiceID = varServiceID;
			
				item.ServiceGuid = varServiceGuid;
			
				item.ServiceTitle = varServiceTitle;

				item.ServiceDescription = varServiceDescription;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;

				item.SortOrder = varSortOrder;

				item.AffiliateNews = varAffiliateNews;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
		
		
		
		#region Typed Columns
		
		
		public static TableSchema.TableColumn ServiceIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		
		
		
		public static TableSchema.TableColumn ServiceGuidColumn
		{
			get { return Schema.Columns[1]; }
		}
		
		
		
		public static TableSchema.TableColumn ServiceTitleColumn
		{
			get { return Schema.Columns[2]; }
		}

		public static TableSchema.TableColumn ServiceDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		
		
		
		
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		
		
		
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		
		
		
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		
		
		
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		public static TableSchema.TableColumn AffiliateNewsColumn
		{
			get { return Schema.Columns[8]; }
		}
		
		
		#endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ServiceID = @"ServiceID";
			 public static string ServiceGuid = @"ServiceGuid";
			 public static string ServiceTitle = @"ServiceTitle";
			 public static string ServiceDescription = @"ServiceDescription";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string SortOrder = @"SortOrder";
			 public static string AffiliateNews = @"AffiliateNews";
			
			 
						
		}
		#endregion
		
		#region Update PK Collections
		
		#endregion
	
		#region Deep Save
		
		#endregion
	}
}
