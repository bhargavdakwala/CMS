using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Etech.CMS.Content
{
	/// <summary>
	/// Strongly-typed collection for the ImageGallary class.
	/// </summary>
    [Serializable]
	public partial class ImageGallaryCollection : ActiveList<ImageGallary, ImageGallaryCollection>
	{	   
		public ImageGallaryCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ImageGallaryCollection</returns>
		public ImageGallaryCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ImageGallary o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Image_Gallary table.
	/// </summary>
	[Serializable]
	public partial class ImageGallary : ActiveRecord<ImageGallary>
	{
		#region .ctors and Default Settings
		
		public ImageGallary()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ImageGallary(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ImageGallary(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ImageGallary(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CMS_Image_Gallary", TableType.Table, DataService.GetInstance("CMSProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarImageID = new TableSchema.TableColumn(schema);
				colvarImageID.ColumnName = "ImageID";
				colvarImageID.DataType = DbType.Int32;
				colvarImageID.MaxLength = 0;
				colvarImageID.AutoIncrement = true;
				colvarImageID.IsNullable = false;
				colvarImageID.IsPrimaryKey = true;
				colvarImageID.IsForeignKey = false;
				colvarImageID.IsReadOnly = false;
				colvarImageID.DefaultSetting = @"";
				colvarImageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImageID);
				
				TableSchema.TableColumn colvarProductID = new TableSchema.TableColumn(schema);
				colvarProductID.ColumnName = "ProductID";
				colvarProductID.DataType = DbType.Int32;
				colvarProductID.MaxLength = 0;
				colvarProductID.AutoIncrement = false;
				colvarProductID.IsNullable = true;
				colvarProductID.IsPrimaryKey = false;
				colvarProductID.IsForeignKey = false;
				colvarProductID.IsReadOnly = false;
				colvarProductID.DefaultSetting = @"";
				colvarProductID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductID);
				
				TableSchema.TableColumn colvarThumbImageFile = new TableSchema.TableColumn(schema);
				colvarThumbImageFile.ColumnName = "ThumbImageFile";
				colvarThumbImageFile.DataType = DbType.String;
				colvarThumbImageFile.MaxLength = 500;
				colvarThumbImageFile.AutoIncrement = false;
				colvarThumbImageFile.IsNullable = true;
				colvarThumbImageFile.IsPrimaryKey = false;
				colvarThumbImageFile.IsForeignKey = false;
				colvarThumbImageFile.IsReadOnly = false;
				colvarThumbImageFile.DefaultSetting = @"";
				colvarThumbImageFile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThumbImageFile);
				
				TableSchema.TableColumn colvarImageFile = new TableSchema.TableColumn(schema);
				colvarImageFile.ColumnName = "ImageFile";
				colvarImageFile.DataType = DbType.String;
				colvarImageFile.MaxLength = 500;
				colvarImageFile.AutoIncrement = false;
				colvarImageFile.IsNullable = true;
				colvarImageFile.IsPrimaryKey = false;
				colvarImageFile.IsForeignKey = false;
				colvarImageFile.IsReadOnly = false;
				colvarImageFile.DefaultSetting = @"";
				colvarImageFile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImageFile);
				
				TableSchema.TableColumn colvarSortOrder = new TableSchema.TableColumn(schema);
				colvarSortOrder.ColumnName = "SortOrder";
				colvarSortOrder.DataType = DbType.Int32;
				colvarSortOrder.MaxLength = 0;
				colvarSortOrder.AutoIncrement = false;
				colvarSortOrder.IsNullable = true;
				colvarSortOrder.IsPrimaryKey = false;
				colvarSortOrder.IsForeignKey = false;
				colvarSortOrder.IsReadOnly = false;
				colvarSortOrder.DefaultSetting = @"";
				colvarSortOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSortOrder);
				
				TableSchema.TableColumn colvarCaption = new TableSchema.TableColumn(schema);
				colvarCaption.ColumnName = "Caption";
				colvarCaption.DataType = DbType.String;
				colvarCaption.MaxLength = 500;
				colvarCaption.AutoIncrement = false;
				colvarCaption.IsNullable = true;
				colvarCaption.IsPrimaryKey = false;
				colvarCaption.IsForeignKey = false;
				colvarCaption.IsReadOnly = false;
				colvarCaption.DefaultSetting = @"";
				colvarCaption.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCaption);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);


                TableSchema.TableColumn colvarImgCategoryID = new TableSchema.TableColumn(schema);
                colvarImgCategoryID.ColumnName = "ImgCategoryID";
                colvarImgCategoryID.DataType = DbType.Int32;
                colvarImgCategoryID.MaxLength = 0;
                colvarImgCategoryID.AutoIncrement = false;
                colvarImgCategoryID.IsNullable = true;
                colvarImgCategoryID.IsPrimaryKey = false;
                colvarImgCategoryID.IsForeignKey = false;
                colvarImgCategoryID.IsReadOnly = false;
                colvarImgCategoryID.DefaultSetting = @"";
                colvarImgCategoryID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarImgCategoryID);


                TableSchema.TableColumn colvarImgSubCategoryID = new TableSchema.TableColumn(schema);
                colvarImgSubCategoryID.ColumnName = "ImgSubCategoryID";
                colvarImgSubCategoryID.DataType = DbType.Int32;
                colvarImgSubCategoryID.MaxLength = 0;
                colvarImgSubCategoryID.AutoIncrement = false;
                colvarImgSubCategoryID.IsNullable = true;
                colvarImgSubCategoryID.IsPrimaryKey = false;
                colvarImgSubCategoryID.IsForeignKey = false;
                colvarImgSubCategoryID.IsReadOnly = false;
                colvarImgSubCategoryID.DefaultSetting = @"";
                colvarImgSubCategoryID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarImgSubCategoryID);


                TableSchema.TableColumn colvarBlogDescription = new TableSchema.TableColumn(schema);
                colvarBlogDescription.ColumnName = "BlogDescription";
                colvarBlogDescription.DataType = DbType.String;
                colvarBlogDescription.MaxLength = 1073741823;
                colvarBlogDescription.AutoIncrement = false;
                colvarBlogDescription.IsNullable = true;
                colvarBlogDescription.IsPrimaryKey = false;
                colvarBlogDescription.IsForeignKey = false;
                colvarBlogDescription.IsReadOnly = false;
                colvarBlogDescription.DefaultSetting = @"";
                colvarBlogDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarBlogDescription);



                TableSchema.TableColumn colvarTherapistsName = new TableSchema.TableColumn(schema);
                colvarTherapistsName.ColumnName = "TherapistsName";
                colvarTherapistsName.DataType = DbType.String;
                colvarTherapistsName.MaxLength = 100;
                colvarTherapistsName.AutoIncrement = false;
                colvarTherapistsName.IsNullable = true;
                colvarTherapistsName.IsPrimaryKey = false;
                colvarTherapistsName.IsForeignKey = false;
                colvarTherapistsName.IsReadOnly = false;
                colvarTherapistsName.DefaultSetting = @"";
                colvarTherapistsName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTherapistsName);


                TableSchema.TableColumn colvarURLTitle = new TableSchema.TableColumn(schema);
                colvarURLTitle.ColumnName = "URLTitle";
                colvarURLTitle.DataType = DbType.String;
                colvarURLTitle.MaxLength = 100;
                colvarURLTitle.AutoIncrement = false;
                colvarURLTitle.IsNullable = true;
                colvarURLTitle.IsPrimaryKey = false;
                colvarURLTitle.IsForeignKey = false;
                colvarURLTitle.IsReadOnly = false;
                colvarURLTitle.DefaultSetting = @"";
                colvarURLTitle.ForeignKeyTableName = "";
                schema.Columns.Add(colvarURLTitle);

                TableSchema.TableColumn colvarKeywords = new TableSchema.TableColumn(schema);
                colvarKeywords.ColumnName = "Keywords";
                colvarKeywords.DataType = DbType.String;
                colvarKeywords.MaxLength = 500;
                colvarKeywords.AutoIncrement = false;
                colvarKeywords.IsNullable = true;
                colvarKeywords.IsPrimaryKey = false;
                colvarKeywords.IsForeignKey = false;
                colvarKeywords.IsReadOnly = false;
                colvarKeywords.DefaultSetting = @"";
                colvarKeywords.ForeignKeyTableName = "";
                schema.Columns.Add(colvarKeywords);

                TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
                colvarTitle.ColumnName = "Title";
                colvarTitle.DataType = DbType.String;
                colvarTitle.MaxLength = 250;
                colvarTitle.AutoIncrement = false;
                colvarTitle.IsNullable = true;
                colvarTitle.IsPrimaryKey = false;
                colvarTitle.IsForeignKey = false;
                colvarTitle.IsReadOnly = false;
                colvarTitle.DefaultSetting = @"";
                colvarTitle.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTitle);

                TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
                colvarDescription.ColumnName = "Description";
                colvarDescription.DataType = DbType.String;
                colvarDescription.MaxLength = 500;
                colvarDescription.AutoIncrement = false;
                colvarDescription.IsNullable = true;
                colvarDescription.IsPrimaryKey = false;
                colvarDescription.IsForeignKey = false;
                colvarDescription.IsReadOnly = false;
                colvarDescription.DefaultSetting = @"";
                colvarDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDescription);

                TableSchema.TableColumn colvarIsLeftSponsorImage = new TableSchema.TableColumn(schema);
                colvarIsLeftSponsorImage.ColumnName = "IsLeftSponsorImage";
                colvarIsLeftSponsorImage.DataType = DbType.Boolean;
                colvarIsLeftSponsorImage.MaxLength = 0;
                colvarIsLeftSponsorImage.AutoIncrement = false;
                colvarIsLeftSponsorImage.IsNullable = true;
                colvarIsLeftSponsorImage.IsPrimaryKey = false;
                colvarIsLeftSponsorImage.IsForeignKey = false;
                colvarIsLeftSponsorImage.IsReadOnly = false;
                colvarIsLeftSponsorImage.DefaultSetting = @"";
                colvarIsLeftSponsorImage.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIsLeftSponsorImage);

				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
                DataService.Providers["CMSProvider"].AddSchema("CMS_Image_Gallary", schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ImageID")]
		[Bindable(true)]
		public int ImageID 
		{
			get { return GetColumnValue<int>(Columns.ImageID); }
			set { SetColumnValue(Columns.ImageID, value); }
		}
		  
		[XmlAttribute("ProductID")]
		[Bindable(true)]
		public int? ProductID 
		{
			get { return GetColumnValue<int?>(Columns.ProductID); }
			set { SetColumnValue(Columns.ProductID, value); }
		}
		  
		[XmlAttribute("ThumbImageFile")]
		[Bindable(true)]
		public string ThumbImageFile 
		{
			get { return GetColumnValue<string>(Columns.ThumbImageFile); }
			set { SetColumnValue(Columns.ThumbImageFile, value); }
		}
		  
		[XmlAttribute("ImageFile")]
		[Bindable(true)]
		public string ImageFile 
		{
			get { return GetColumnValue<string>(Columns.ImageFile); }
			set { SetColumnValue(Columns.ImageFile, value); }
		}
		  
		[XmlAttribute("SortOrder")]
		[Bindable(true)]
		public int? SortOrder 
		{
			get { return GetColumnValue<int?>(Columns.SortOrder); }
			set { SetColumnValue(Columns.SortOrder, value); }
		}
		  
		[XmlAttribute("Caption")]
		[Bindable(true)]
		public string Caption 
		{
			get { return GetColumnValue<string>(Columns.Caption); }
			set { SetColumnValue(Columns.Caption, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}


        [XmlAttribute("ImgCategoryID")]
        [Bindable(true)]
        public int ImgCategoryID
        {
            get { return GetColumnValue<int>(Columns.ImgCategoryID); }
            set { SetColumnValue(Columns.ImgCategoryID, value); }
        }

        [XmlAttribute("ImgSubCategoryID")]
        [Bindable(true)]
        public int ImgSubCategoryID
        {
            get { return GetColumnValue<int>(Columns.ImgSubCategoryID); }
            set { SetColumnValue(Columns.ImgSubCategoryID, value); }
        }

        [XmlAttribute("BlogDescription")]
        [Bindable(true)]
        public string BlogDescription
        {
            get { return GetColumnValue<string>(Columns.BlogDescription); }
            set { SetColumnValue(Columns.BlogDescription, value); }
        }


        [XmlAttribute("TherapistsName")]
        [Bindable(true)]
        public string TherapistsName
        {
            get { return GetColumnValue<string>(Columns.TherapistsName); }
            set { SetColumnValue(Columns.TherapistsName, value); }
        }

        [XmlAttribute("URLTitle")]
        [Bindable(true)]
        public string URLTitle
        {
            get { return GetColumnValue<string>(Columns.URLTitle); }
            set { SetColumnValue(Columns.URLTitle, value); }
        }

        [XmlAttribute("Keywords")]
        [Bindable(true)]
        public string Keywords
        {
            get { return GetColumnValue<string>(Columns.Keywords); }
            set { SetColumnValue(Columns.Keywords, value); }
        }

        [XmlAttribute("Title")]
        [Bindable(true)]
        public string Title
        {
            get { return GetColumnValue<string>(Columns.Title); }
            set { SetColumnValue(Columns.Title, value); }
        }

        [XmlAttribute("Description")]
        [Bindable(true)]
        public string Description
        {
            get { return GetColumnValue<string>(Columns.Description); }
            set { SetColumnValue(Columns.Description, value); }
        }

        [XmlAttribute("IsLeftSponsorImage")]
        [Bindable(true)]
        public bool? IsLeftSponsorImage
        {
            get { return GetColumnValue<bool?>(Columns.IsLeftSponsorImage); }
            set { SetColumnValue(Columns.IsLeftSponsorImage, value); }
        }
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
        public static void Insert(int? varProductID, string varThumbImageFile, string varImageFile, int? varSortOrder, string varCaption, string varCreatedBy, DateTime? varCreatedOn, string varModifiedBy, DateTime? varModifiedOn, int varImgCategoryID, int varImgSubCategoryID, string varBlogDescription, string varTherapistsName, string varURLTitle, string varKeywords, string varTitle, string varDescription, bool? varIsLeftSponsorImage)
		{
			ImageGallary item = new ImageGallary();
			
			item.ProductID = varProductID;
			
			item.ThumbImageFile = varThumbImageFile;
			
			item.ImageFile = varImageFile;
			
			item.SortOrder = varSortOrder;
			
			item.Caption = varCaption;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;

            item.ImgCategoryID = varImgCategoryID;

            item.ImgSubCategoryID = varImgSubCategoryID;

            item.BlogDescription = varBlogDescription;

            item.TherapistsName = varTherapistsName;

            item.URLTitle = varURLTitle;

            item.Keywords = varKeywords;

            item.Title = varTitle;

            item.Description = varDescription;

            item.IsLeftSponsorImage = varIsLeftSponsorImage;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
        public static void Update(int varImageID, int? varProductID, string varThumbImageFile, string varImageFile, int? varSortOrder, string varCaption, string varCreatedBy, DateTime? varCreatedOn, string varModifiedBy, DateTime? varModifiedOn, int varImgCategoryID, int varImgSubCategoryID, string varBlogDescription, string varTherapistsName, string varURLTitle, string varKeywords, string varTitle, string varDescription, bool? varIsLeftSponsorImage)
		{
			ImageGallary item = new ImageGallary();
			
				item.ImageID = varImageID;
			
				item.ProductID = varProductID;
			
				item.ThumbImageFile = varThumbImageFile;
			
				item.ImageFile = varImageFile;
			
				item.SortOrder = varSortOrder;
			
				item.Caption = varCaption;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;

                item.ImgCategoryID = varImgCategoryID;

                item.ImgSubCategoryID = varImgSubCategoryID;

                item.BlogDescription = varBlogDescription;

                item.TherapistsName = varTherapistsName;

                item.URLTitle  = varURLTitle;

                item.Keywords = varKeywords;

                item.Title = varTitle;

                item.Description = varDescription;

                item.IsLeftSponsorImage = varIsLeftSponsorImage;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ImageIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ProductIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ThumbImageFileColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ImageFileColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SortOrderColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CaptionColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[9]; }
        }

        public static TableSchema.TableColumn ImgCategoryIDColumn
        {
            get { return Schema.Columns[10]; }
        }

        public static TableSchema.TableColumn ImgSubCategoryIDColumn
        {
            get { return Schema.Columns[11]; }
        }

        public static TableSchema.TableColumn BlogDescriptionColumn
        {
            get { return Schema.Columns[12]; }
        }

        public static TableSchema.TableColumn TherapistsNameColumn
        {
            get { return Schema.Columns[13]; }
        }

        public static TableSchema.TableColumn URLTitleColumn
        {
            get { return Schema.Columns[14]; }
        }

        public static TableSchema.TableColumn KeywordsColumn
        {
            get { return Schema.Columns[15]; }
        }

        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[16]; }
        }

        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[17]; }
        }

        public static TableSchema.TableColumn IsLeftSponsorImageColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ImageID = @"ImageID";
			 public static string ProductID = @"ProductID";
			 public static string ThumbImageFile = @"ThumbImageFile";
			 public static string ImageFile = @"ImageFile";
			 public static string SortOrder = @"SortOrder";
			 public static string Caption = @"Caption";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
             public static string ImgCategoryID = @"ImgCategoryID";
             public static string ImgSubCategoryID = @"ImgSubCategoryID";
             public static string BlogDescription = @"BlogDescription";
             public static string TherapistsName = @"TherapistsName";
             public static string URLTitle = @"URLTitle";
             public static string Keywords = @"Keywords";
             public static string Title = @"Title";
             public static string Description = @"Description";
             public static string IsLeftSponsorImage = @"IsLeftSponsorImage";
             
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
