using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Etech.CMS.Content
{
	/// <summary>
	/// Strongly-typed collection for the FullMember class.
	/// </summary>
	[Serializable]
	public partial class FullMemberCollection : ActiveList<FullMember, FullMemberCollection>
	{	   
		public FullMemberCollection() {}
		
		/// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
		/// </summary>
		/// <returns>FullMemberCollection</returns>
		public FullMemberCollection Filter()
		{
			for (int i = this.Count - 1; i > -1; i--)
			{
				FullMember o = this[i];
				foreach (SubSonic.Where w in this.wheres)
				{
					bool remove = false;
					System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
					if (pi.CanRead)
					{
						object val = pi.GetValue(o, null);
						switch (w.Comparison)
						{
							case SubSonic.Comparison.Equals:
								if (!val.Equals(w.ParameterValue))
								{
									remove = true;
								}
								break;
						}
					}
					if (remove)
					{
						this.Remove(o);
						break;
					}
				}
			}
			return this;
		}
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the FullMember table.
	/// </summary>
	[Serializable]
	public partial class FullMember : ActiveRecord<FullMember>
	{
		#region .ctors and Default Settings
		
		public FullMember()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public FullMember(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
		
		public FullMember(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public FullMember(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CMS_Content_FullMember", TableType.Table, DataService.GetInstance("CMSProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 100;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = true;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);
				
				TableSchema.TableColumn colvarCompany = new TableSchema.TableColumn(schema);
				colvarCompany.ColumnName = "Company";
				colvarCompany.DataType = DbType.String;
				colvarCompany.MaxLength = 100;
				colvarCompany.AutoIncrement = false;
				colvarCompany.IsNullable = true;
				colvarCompany.IsPrimaryKey = false;
				colvarCompany.IsForeignKey = false;
				colvarCompany.IsReadOnly = false;
				colvarCompany.DefaultSetting = @"";
				colvarCompany.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompany);
				
				TableSchema.TableColumn colvarPhone = new TableSchema.TableColumn(schema);
				colvarPhone.ColumnName = "Phone";
				colvarPhone.DataType = DbType.String;
				colvarPhone.MaxLength = 50;
				colvarPhone.AutoIncrement = false;
				colvarPhone.IsNullable = true;
				colvarPhone.IsPrimaryKey = false;
				colvarPhone.IsForeignKey = false;
				colvarPhone.IsReadOnly = false;
				colvarPhone.DefaultSetting = @"";
				colvarPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone);
				
				TableSchema.TableColumn colvarMobile = new TableSchema.TableColumn(schema);
				colvarMobile.ColumnName = "Mobile";
				colvarMobile.DataType = DbType.String;
				colvarMobile.MaxLength = 50;
				colvarMobile.AutoIncrement = false;
				colvarMobile.IsNullable = true;
				colvarMobile.IsPrimaryKey = false;
				colvarMobile.IsForeignKey = false;
				colvarMobile.IsReadOnly = false;
				colvarMobile.DefaultSetting = @"";
				colvarMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMobile);
				
				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 100;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);
				
				TableSchema.TableColumn colvarWebAddress = new TableSchema.TableColumn(schema);
				colvarWebAddress.ColumnName = "WebAddress";
				colvarWebAddress.DataType = DbType.String;
				colvarWebAddress.MaxLength = 500;
				colvarWebAddress.AutoIncrement = false;
				colvarWebAddress.IsNullable = true;
				colvarWebAddress.IsPrimaryKey = false;
				colvarWebAddress.IsForeignKey = false;
				colvarWebAddress.IsReadOnly = false;
				colvarWebAddress.DefaultSetting = @"";
				colvarWebAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWebAddress);
				
				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);
				
				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["CMSProvider"].AddSchema("FullMember",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Name")]
		[Bindable(true)]
		public string Name 
		{
			get { return GetColumnValue<string>(Columns.Name); }
			set { SetColumnValue(Columns.Name, value); }
		}
		  
		[XmlAttribute("Company")]
		[Bindable(true)]
		public string Company 
		{
			get { return GetColumnValue<string>(Columns.Company); }
			set { SetColumnValue(Columns.Company, value); }
		}
		  
		[XmlAttribute("Phone")]
		[Bindable(true)]
		public string Phone 
		{
			get { return GetColumnValue<string>(Columns.Phone); }
			set { SetColumnValue(Columns.Phone, value); }
		}
		  
		[XmlAttribute("Mobile")]
		[Bindable(true)]
		public string Mobile 
		{
			get { return GetColumnValue<string>(Columns.Mobile); }
			set { SetColumnValue(Columns.Mobile, value); }
		}
		  
		[XmlAttribute("Email")]
		[Bindable(true)]
		public string Email 
		{
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		  
		[XmlAttribute("WebAddress")]
		[Bindable(true)]
		public string WebAddress 
		{
			get { return GetColumnValue<string>(Columns.WebAddress); }
			set { SetColumnValue(Columns.WebAddress, value); }
		}
		  
		[XmlAttribute("ModifiedDate")]
		[Bindable(true)]
		public DateTime? ModifiedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set { SetColumnValue(Columns.ModifiedDate, value); }
		}
		  
		[XmlAttribute("IsActive")]
		[Bindable(true)]
		public bool? IsActive 
		{
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
		
		
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varName,string varCompany,string varPhone,string varMobile,string varEmail,string varWebAddress,DateTime? varModifiedDate,bool? varIsActive)
		{
			FullMember item = new FullMember();
			
			item.Name = varName;
			
			item.Company = varCompany;
			
			item.Phone = varPhone;
			
			item.Mobile = varMobile;
			
			item.Email = varEmail;
			
			item.WebAddress = varWebAddress;
			
			item.ModifiedDate = varModifiedDate;
			
			item.IsActive = varIsActive;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varName,string varCompany,string varPhone,string varMobile,string varEmail,string varWebAddress,DateTime? varModifiedDate,bool? varIsActive)
		{
			FullMember item = new FullMember();
			
				item.Id = varId;
			
				item.Name = varName;
			
				item.Company = varCompany;
			
				item.Phone = varPhone;
			
				item.Mobile = varMobile;
			
				item.Email = varEmail;
			
				item.WebAddress = varWebAddress;
			
				item.ModifiedDate = varModifiedDate;
			
				item.IsActive = varIsActive;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
		
		
		
		#region Typed Columns
		
		
		public static TableSchema.TableColumn IdColumn
		{
			get { return Schema.Columns[0]; }
		}
		
		
		
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}
		
		
		
		public static TableSchema.TableColumn CompanyColumn
		{
			get { return Schema.Columns[2]; }
		}
		
		
		
		public static TableSchema.TableColumn PhoneColumn
		{
			get { return Schema.Columns[3]; }
		}
		
		
		
		public static TableSchema.TableColumn MobileColumn
		{
			get { return Schema.Columns[4]; }
		}
		
		
		
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[5]; }
		}
		
		
		
		public static TableSchema.TableColumn WebAddressColumn
		{
			get { return Schema.Columns[6]; }
		}
		
		
		
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[7]; }
		}
		
		
		
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[8]; }
		}
		
		
		
		#endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string Name = @"Name";
			 public static string Company = @"Company";
			 public static string Phone = @"Phone";
			 public static string Mobile = @"Mobile";
			 public static string Email = @"Email";
			 public static string WebAddress = @"WebAddress";
			 public static string ModifiedDate = @"ModifiedDate";
			 public static string IsActive = @"IsActive";
						
		}
		#endregion
		
		#region Update PK Collections
		
		#endregion
	
		#region Deep Save
		
		#endregion
	}
}
