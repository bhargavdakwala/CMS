using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using SubSonic;
using SubSonic.Utilities;
// <auto-generated />
namespace Etech.CMS.Content
{
    /// <summary>
    /// Strongly-typed collection for the NewsLetter class.
    /// </summary>
    [Serializable]
    public partial class NewsLetterCollection : ActiveList<NewsLetter, NewsLetterCollection>
    {
        public NewsLetterCollection() { }

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>NewsLetterCollection</returns>
        public NewsLetterCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                NewsLetter o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }


    }
    /// <summary>
    /// This is an ActiveRecord class which wraps the NewsLetter table.
    /// </summary>
    [Serializable]
    public partial class NewsLetter : ActiveRecord<NewsLetter>
    {
        #region .ctors and Default Settings

        public NewsLetter()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public NewsLetter(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public NewsLetter(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public NewsLetter(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region Schema and Query Accessor
        public static Query CreateQuery() { return new Query(Schema); }
        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("CMS_Content_NewsLetter", TableType.Table, DataService.GetInstance("CMSProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                TableSchema.TableColumn colvarNewsLetterID = new TableSchema.TableColumn(schema);
                colvarNewsLetterID.ColumnName = "NewsLetterID";
                colvarNewsLetterID.DataType = DbType.Int32;
                colvarNewsLetterID.MaxLength = 0;
                colvarNewsLetterID.AutoIncrement = true;
                colvarNewsLetterID.IsNullable = false;
                colvarNewsLetterID.IsPrimaryKey = true;
                colvarNewsLetterID.IsForeignKey = false;
                colvarNewsLetterID.IsReadOnly = false;
                colvarNewsLetterID.DefaultSetting = @"";
                colvarNewsLetterID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNewsLetterID);

                TableSchema.TableColumn colvarNewsLetterGUID = new TableSchema.TableColumn(schema);
                colvarNewsLetterGUID.ColumnName = "NewsLetterGUID";
                colvarNewsLetterGUID.DataType = DbType.String;
                colvarNewsLetterGUID.MaxLength = 50;
                colvarNewsLetterGUID.AutoIncrement = false;
                colvarNewsLetterGUID.IsNullable = true;
                colvarNewsLetterGUID.IsPrimaryKey = false;
                colvarNewsLetterGUID.IsForeignKey = false;
                colvarNewsLetterGUID.IsReadOnly = false;
                colvarNewsLetterGUID.DefaultSetting = @"";
                colvarNewsLetterGUID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNewsLetterGUID);

                TableSchema.TableColumn colvarNewsLetterTitle = new TableSchema.TableColumn(schema);
                colvarNewsLetterTitle.ColumnName = "NewsLetterTitle";
                colvarNewsLetterTitle.DataType = DbType.String;
                colvarNewsLetterTitle.MaxLength = 50;
                colvarNewsLetterTitle.AutoIncrement = false;
                colvarNewsLetterTitle.IsNullable = true;
                colvarNewsLetterTitle.IsPrimaryKey = false;
                colvarNewsLetterTitle.IsForeignKey = false;
                colvarNewsLetterTitle.IsReadOnly = false;
                colvarNewsLetterTitle.DefaultSetting = @"";
                colvarNewsLetterTitle.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNewsLetterTitle);

                TableSchema.TableColumn colvarNewsLetterSubject = new TableSchema.TableColumn(schema);
                colvarNewsLetterSubject.ColumnName = "NewsLetterSubject";
                colvarNewsLetterSubject.DataType = DbType.String;
                colvarNewsLetterSubject.MaxLength = 100;
                colvarNewsLetterSubject.AutoIncrement = false;
                colvarNewsLetterSubject.IsNullable = true;
                colvarNewsLetterSubject.IsPrimaryKey = false;
                colvarNewsLetterSubject.IsForeignKey = false;
                colvarNewsLetterSubject.IsReadOnly = false;
                colvarNewsLetterSubject.DefaultSetting = @"";
                colvarNewsLetterSubject.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNewsLetterSubject);

                TableSchema.TableColumn colvarTemplateID = new TableSchema.TableColumn(schema);
                colvarTemplateID.ColumnName = "TemplateID";
                colvarTemplateID.DataType = DbType.Int32;
                colvarTemplateID.MaxLength = 0;
                colvarTemplateID.AutoIncrement = false;
                colvarTemplateID.IsNullable = true;
                colvarTemplateID.IsPrimaryKey = false;
                colvarTemplateID.IsForeignKey = false;
                colvarTemplateID.IsReadOnly = false;
                colvarTemplateID.DefaultSetting = @"";
                colvarTemplateID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTemplateID);

                TableSchema.TableColumn colvarNewsLetterDescription = new TableSchema.TableColumn(schema);
                colvarNewsLetterDescription.ColumnName = "NewsLetterDescription";
                colvarNewsLetterDescription.DataType = DbType.String;
                colvarNewsLetterDescription.MaxLength = -1;
                colvarNewsLetterDescription.AutoIncrement = false;
                colvarNewsLetterDescription.IsNullable = true;
                colvarNewsLetterDescription.IsPrimaryKey = false;
                colvarNewsLetterDescription.IsForeignKey = false;
                colvarNewsLetterDescription.IsReadOnly = false;
                colvarNewsLetterDescription.DefaultSetting = @"";
                colvarNewsLetterDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNewsLetterDescription);

                TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
                colvarIsActive.ColumnName = "IsActive";
                colvarIsActive.DataType = DbType.Boolean;
                colvarIsActive.MaxLength = 0;
                colvarIsActive.AutoIncrement = false;
                colvarIsActive.IsNullable = true;
                colvarIsActive.IsPrimaryKey = false;
                colvarIsActive.IsForeignKey = false;
                colvarIsActive.IsReadOnly = false;
                colvarIsActive.DefaultSetting = @"";
                colvarIsActive.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIsActive);

                TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
                colvarCreatedBy.ColumnName = "CreatedBy";
                colvarCreatedBy.DataType = DbType.String;
                colvarCreatedBy.MaxLength = 50;
                colvarCreatedBy.AutoIncrement = false;
                colvarCreatedBy.IsNullable = true;
                colvarCreatedBy.IsPrimaryKey = false;
                colvarCreatedBy.IsForeignKey = false;
                colvarCreatedBy.IsReadOnly = false;
                colvarCreatedBy.DefaultSetting = @"";
                colvarCreatedBy.ForeignKeyTableName = "";
                schema.Columns.Add(colvarCreatedBy);

                TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
                colvarCreatedOn.ColumnName = "CreatedOn";
                colvarCreatedOn.DataType = DbType.DateTime;
                colvarCreatedOn.MaxLength = 0;
                colvarCreatedOn.AutoIncrement = false;
                colvarCreatedOn.IsNullable = true;
                colvarCreatedOn.IsPrimaryKey = false;
                colvarCreatedOn.IsForeignKey = false;
                colvarCreatedOn.IsReadOnly = false;
                colvarCreatedOn.DefaultSetting = @"";
                colvarCreatedOn.ForeignKeyTableName = "";
                schema.Columns.Add(colvarCreatedOn);

                TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
                colvarModifiedBy.ColumnName = "ModifiedBy";
                colvarModifiedBy.DataType = DbType.String;
                colvarModifiedBy.MaxLength = 50;
                colvarModifiedBy.AutoIncrement = false;
                colvarModifiedBy.IsNullable = true;
                colvarModifiedBy.IsPrimaryKey = false;
                colvarModifiedBy.IsForeignKey = false;
                colvarModifiedBy.IsReadOnly = false;
                colvarModifiedBy.DefaultSetting = @"";
                colvarModifiedBy.ForeignKeyTableName = "";
                schema.Columns.Add(colvarModifiedBy);

                TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
                colvarModifiedOn.ColumnName = "ModifiedOn";
                colvarModifiedOn.DataType = DbType.DateTime;
                colvarModifiedOn.MaxLength = 0;
                colvarModifiedOn.AutoIncrement = false;
                colvarModifiedOn.IsNullable = true;
                colvarModifiedOn.IsPrimaryKey = false;
                colvarModifiedOn.IsForeignKey = false;
                colvarModifiedOn.IsReadOnly = false;
                colvarModifiedOn.DefaultSetting = @"";
                colvarModifiedOn.ForeignKeyTableName = "";
                schema.Columns.Add(colvarModifiedOn);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["CMSProvider"].AddSchema("NewsLetter", schema);
            }
        }
        #endregion

        #region Props

        [XmlAttribute("NewsLetterID")]
        [Bindable(true)]
        public int NewsLetterID
        {
            get { return GetColumnValue<int>(Columns.NewsLetterID); }
            set { SetColumnValue(Columns.NewsLetterID, value); }
        }

        [XmlAttribute("NewsLetterGUID")]
        [Bindable(true)]
        public string NewsLetterGUID
        {
            get { return GetColumnValue<string>(Columns.NewsLetterGUID); }
            set { SetColumnValue(Columns.NewsLetterGUID, value); }
        }

        [XmlAttribute("NewsLetterTitle")]
        [Bindable(true)]
        public string NewsLetterTitle
        {
            get { return GetColumnValue<string>(Columns.NewsLetterTitle); }
            set { SetColumnValue(Columns.NewsLetterTitle, value); }
        }

        [XmlAttribute("NewsLetterSubject")]
        [Bindable(true)]
        public string NewsLetterSubject
        {
            get { return GetColumnValue<string>(Columns.NewsLetterSubject); }
            set { SetColumnValue(Columns.NewsLetterSubject, value); }
        }

        [XmlAttribute("TemplateID")]
        [Bindable(true)]
        public int? TemplateID
        {
            get { return GetColumnValue<int?>(Columns.TemplateID); }
            set { SetColumnValue(Columns.TemplateID, value); }
        }

        [XmlAttribute("NewsLetterDescription")]
        [Bindable(true)]
        public string NewsLetterDescription
        {
            get { return GetColumnValue<string>(Columns.NewsLetterDescription); }
            set { SetColumnValue(Columns.NewsLetterDescription, value); }
        }

        [XmlAttribute("IsActive")]
        [Bindable(true)]
        public bool? IsActive
        {
            get { return GetColumnValue<bool?>(Columns.IsActive); }
            set { SetColumnValue(Columns.IsActive, value); }
        }

        [XmlAttribute("CreatedBy")]
        [Bindable(true)]
        public string CreatedBy
        {
            get { return GetColumnValue<string>(Columns.CreatedBy); }
            set { SetColumnValue(Columns.CreatedBy, value); }
        }

        [XmlAttribute("CreatedOn")]
        [Bindable(true)]
        public DateTime? CreatedOn
        {
            get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
            set { SetColumnValue(Columns.CreatedOn, value); }
        }

        [XmlAttribute("ModifiedBy")]
        [Bindable(true)]
        public string ModifiedBy
        {
            get { return GetColumnValue<string>(Columns.ModifiedBy); }
            set { SetColumnValue(Columns.ModifiedBy, value); }
        }

        [XmlAttribute("ModifiedOn")]
        [Bindable(true)]
        public DateTime? ModifiedOn
        {
            get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
            set { SetColumnValue(Columns.ModifiedOn, value); }
        }

        #endregion




        //no foreign key tables defined (0)



        //no ManyToMany tables defined (0)



        #region ObjectDataSource support


        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string varNewsLetterGUID, string varNewsLetterTitle, string varNewsLetterSubject, int? varTemplateID, string varNewsLetterDescription, bool? varIsActive, string varCreatedBy, DateTime? varCreatedOn, string varModifiedBy, DateTime? varModifiedOn)
        {
            NewsLetter item = new NewsLetter();

            item.NewsLetterGUID = varNewsLetterGUID;

            item.NewsLetterTitle = varNewsLetterTitle;

            item.NewsLetterSubject = varNewsLetterSubject;

            item.TemplateID = varTemplateID;

            item.NewsLetterDescription = varNewsLetterDescription;

            item.IsActive = varIsActive;

            item.CreatedBy = varCreatedBy;

            item.CreatedOn = varCreatedOn;

            item.ModifiedBy = varModifiedBy;

            item.ModifiedOn = varModifiedOn;


            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(int varNewsLetterID, string varNewsLetterGUID, string varNewsLetterTitle, string varNewsLetterSubject, int? varTemplateID, string varNewsLetterDescription, bool? varIsActive,string varModifiedBy, DateTime? varModifiedOn)
        {
            NewsLetter item = new NewsLetter();

            item.NewsLetterID = varNewsLetterID;

            item.NewsLetterGUID = varNewsLetterGUID;

            item.NewsLetterTitle = varNewsLetterTitle;

            item.NewsLetterSubject = varNewsLetterSubject;

            item.TemplateID = varTemplateID;

            item.NewsLetterDescription = varNewsLetterDescription;

            item.IsActive = varIsActive;

            //item.CreatedBy = varCreatedBy;

            //item.CreatedOn = varCreatedOn;

            item.ModifiedBy = varModifiedBy;

            item.ModifiedOn = varModifiedOn;

            item.IsNew = false;
            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }
        #endregion



        #region Typed Columns


        public static TableSchema.TableColumn NewsLetterIDColumn
        {
            get { return Schema.Columns[0]; }
        }



        public static TableSchema.TableColumn NewsLetterGUIDColumn
        {
            get { return Schema.Columns[1]; }
        }



        public static TableSchema.TableColumn NewsLetterTitleColumn
        {
            get { return Schema.Columns[2]; }
        }



        public static TableSchema.TableColumn NewsLetterSubjectColumn
        {
            get { return Schema.Columns[3]; }
        }



        public static TableSchema.TableColumn TemplateIDColumn
        {
            get { return Schema.Columns[4]; }
        }



        public static TableSchema.TableColumn NewsLetterDescriptionColumn
        {
            get { return Schema.Columns[5]; }
        }



        public static TableSchema.TableColumn IsActiveColumn
        {
            get { return Schema.Columns[6]; }
        }



        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[7]; }
        }



        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[8]; }
        }



        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[9]; }
        }



        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[10]; }
        }



        #endregion
        #region Columns Struct
        public struct Columns
        {
            public static string NewsLetterID = @"NewsLetterID";
            public static string NewsLetterGUID = @"NewsLetterGUID";
            public static string NewsLetterTitle = @"NewsLetterTitle";
            public static string NewsLetterSubject = @"NewsLetterSubject";
            public static string TemplateID = @"TemplateID";
            public static string NewsLetterDescription = @"NewsLetterDescription";
            public static string IsActive = @"IsActive";
            public static string CreatedBy = @"CreatedBy";
            public static string CreatedOn = @"CreatedOn";
            public static string ModifiedBy = @"ModifiedBy";
            public static string ModifiedOn = @"ModifiedOn";

        }
        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion
    }
}
